<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<generatorConfiguration>
    <!--    导入属性配置   -->
    <properties resource="mybatis-generator-conf.properties"/>

    <context id="default" targetRuntime="MyBatis3" defaultModelType="flat">
        <!--        默认文件创建人-->
        <property name="createBy" value="fcn"/>
        <!--        lombok代替get/set方法-->
        <!--        <plugin type="org.mybatis.generator.custom.plugins.LombokPlugin"/>-->
        <!--        实现序列化接口    -->
        <plugin type="org.mybatis.generator.plugins.SerializablePlugin"/>
        <!--        生成toString方法    -->
        <plugin type="org.mybatis.generator.plugins.ToStringPlugin" />
        <!--        自定义文件名    -->
        <plugin type="org.mybatis.generator.plugins.RenameExampleClassPlugin">
            <property name="searchString" value="[e|E]xample$"/>
            <property name="replaceString" value="Criteria"/>
        </plugin>
        <!-- Mapper注解插件 -->
        <plugin type="com.itfsw.mybatis.generator.plugins.MapperAnnotationPlugin">
            <!-- @Mapper 默认开启 -->
            <property name="@Mapper" value="true"/>
            <!-- @Repository 开启后解决IDEA工具@Autowired报错 -->
            <property name="@Repository" value="org.springframework.stereotype.Repository"/>
            <!-- 其他自定义注解 -->
<!--            <property name="@DS(&quot;master&quot;)" value="com.baomidou.dynamic.datasource.annotation.DS"/>-->
        </plugin>
        <!--        生成service和serviceImpl-->
        <!--        <plugin type="org.mybatis.generator.custom.plugins.ServicePlugin"/>-->

        <!-- 在创建class时，对注释进行控制,此处是去除MGB生成的无用注释 -->
        <commentGenerator type="com.example.demo2.dao.MyCommentGenerator">
            <property name="suppressDate" value="true"/>
            <property name="suppressAllComments" value="true"/>
        </commentGenerator>

        <!--mysql jdbc的数据库连接  -->
        <jdbcConnection driverClass="${jdbc.driver-class}"
                        connectionURL="${jdbc.connection-url}"
                        userId="${jdbc.user-id}"
                        password="${jdbc.password}">
            <property name="nullCatalogMeansCurrent" value="true"/>
        </jdbcConnection>


        <!-- 非必需，类型处理器，在数据库类型和java类型之间的转换控制-->
<!--        <javaTypeResolver>-->
<!--            <property name="forceBigDecimals" value="false"/>-->
<!--        </javaTypeResolver>-->


        <!--        生成java实体类-->
        <javaModelGenerator targetPackage="${target.model-package}"
                            targetProject="src/main/java">

            <!-- 是否允许子包，即targetPackage.schemaName.tableName -->
            <property name="enableSubPackages" value="false"/>
            <!-- 是否对model添加 构造函数 -->
            <!--            <property name="constructorBased" value="true"/>-->
            <!-- 是否对类CHAR类型的列的数据进行trim操作 -->
            <!--            <property name="trimStrings" value="true"/>-->
            <!-- 建立的Model对象是否 不可改变  即生成的Model对象不会有 setter方法，只有构造方法 -->
            <!--            <property name="immutable" value="false"/>-->
        </javaModelGenerator>

        <!--        生成mapper接口文件-->
        <sqlMapGenerator targetPackage="${target.mapper-package}"
                         targetProject="src/main/java">
            <property name="enableSubPackages" value="false"/>
        </sqlMapGenerator>

        <!-- 自动生成mapper接口, 可以是 ANNOTATEDMAPPER(注解), XMLMAPPER(xml), MIXEDMAPPER(混合模式) -->
        <javaClientGenerator targetPackage="${target.mapper-package}"
                             targetProject="src/main/java" type="ANNOTATEDMAPPER">
            <property name="enableSubPackages" value="false"/>
        </javaClientGenerator>

        <!--tableName:指定了表名,domainObjectName:指定了实体类的名称-->
        <!--        <table tableName="vam_outdoor_temp_year_view_mst" domainObjectName="pojoName">-->
        <!--            <generatedKey column="id" sqlStatement="Mysql"/>-->
        <!--        </table>-->
        <table tableName="${table.name}"/>
<!--        <table tableName="country"/>-->
    </context>
</generatorConfiguration>